import { createSlice, PayloadAction } from "@reduxjs/toolkit";
import { ReservationItem } from "../../../interface";

// üè™ ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Ç‡∏≠‡∏á‡∏£‡πâ‡∏≤‡∏ô‡∏ô‡∏ß‡∏î
type MassageshopItem = {
  name: string;
  openclosetime: { open: string; close: string };
};

// üè∑Ô∏è ‡∏Å‡∏≥‡∏´‡∏ô‡∏î State ‡∏Ç‡∏≠‡∏á Redux
type ReserveState = {
  reserveItems: ReservationItem[];
  massageshopItems: MassageshopItem[]; // ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏£‡πâ‡∏≤‡∏ô‡∏ô‡∏ß‡∏î‡∏•‡∏á‡πÉ‡∏ô state
};

const initialState: ReserveState = { 
  reserveItems: [], 
  massageshopItems: [] // ‚úÖ ‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÄ‡∏õ‡πá‡∏ô array ‡∏ß‡πà‡∏≤‡∏á
};

export const reserveSlice = createSlice({
  name: "reservation",
  initialState,
  reducers: {

    addReservation: (state, action: PayloadAction<ReservationItem>) => {
      const { venue, bookDate, startTime, endTime, nameLastname, tel } = action.payload;

      // üöÄ ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏£‡πâ‡∏≤‡∏ô‡∏ô‡∏ß‡∏î‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö `venue`
      const massageshopItem = state.massageshopItems.find(
        (item) => item.name === venue
      );

      if (!massageshopItem) {
        console.error("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡πâ‡∏≤‡∏ô‡∏ô‡∏µ‡πâ");
        return;
      }

      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÄ‡∏ß‡∏•‡∏≤
      const timePattern = /^([01]?[0-9]|2[0-3]):[0-5][0-9]$/;
      const { open, close } =  massageshopItem.openclosetime;
      if (!timePattern.test(open) || !timePattern.test(close) || !timePattern.test(startTime) || !timePattern.test(endTime)) {
        alert("‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÄ‡∏ß‡∏•‡∏≤‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á");
        return;
      }

      // ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏ß‡∏•‡∏≤
      const openTime = new Date(`1970-01-01T${open}:00`);
      const closeTime = new Date(`1970-01-01T${close}:00`);
      const startBookingTime = new Date(`1970-01-01T${startTime}:00`);
      const endBookingTime = new Date(`1970-01-01T${endTime}:00`);

      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏õ‡∏¥‡∏î-‡∏õ‡∏¥‡∏î
      if (startBookingTime < openTime || endBookingTime > closeTime) {
        alert(`‡πÄ‡∏ß‡∏•‡∏≤‡∏à‡∏≠‡∏á‡∏ï‡πâ‡∏≠‡∏á‡∏≠‡∏¢‡∏π‡πà‡∏†‡∏≤‡∏¢‡πÉ‡∏ô‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏õ‡∏¥‡∏î-‡∏õ‡∏¥‡∏î‡∏Ç‡∏≠‡∏á‡∏£‡πâ‡∏≤‡∏ô (${open} - ${close})`);
        return;
      }

      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡πÄ‡∏î‡∏¥‡∏°
      const existingBookingIndex = state. reserveItems.findIndex(
        (item) => item.venue === venue && item.bookDate === bookDate
      );

      if (existingBookingIndex !== -1) {
        alert("‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡πÄ‡∏î‡∏¥‡∏°‡∏à‡∏∞‡∏ñ‡∏π‡∏Å‡πÅ‡∏ó‡∏ô‡∏ó‡∏µ‡πà‡∏î‡πâ‡∏ß‡∏¢‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡∏°‡πà");
        state.reserveItems[existingBookingIndex] = action.payload;
      } else {
        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡πÄ‡∏Å‡∏¥‡∏ô 3 ‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        if (state.reserveItems.length >= 3) {
          alert("‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏à‡∏≠‡∏á‡πÑ‡∏î‡πâ‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤ 3 ‡∏Ñ‡∏£‡∏±‡πâ‡∏á");
          return;
        }
        // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà
        state.reserveItems.push(action.payload);
      }
    },

    removeReservation: (state, action: PayloadAction<ReservationItem>) => {
      state.reserveItems = state.reserveItems.filter(
        (item) =>
          !(item.nameLastname === action.payload.nameLastname &&
            item.tel === action.payload.tel &&
            item.venue === action.payload.venue &&
            item.bookDate === action.payload.bookDate)
      );
    },

    clearReservations: (state) => {
      state.reserveItems = [];
    },

    updateReservation(state, action: PayloadAction<ReservationItem>) {
      const index = state.reserveItems.findIndex(
        (reservation) => reservation.id === action.payload.id
      );
      if (index !== -1) {
        state.reserveItems[index] = action.payload;
      }
    },

    setReservations: (state, action) => {
      state.reserveItems = action.payload;
    }, 
    editReservation: (state, action: PayloadAction<ReservationItem>) => {
      const updated = action.payload;
      const index = state.reserveItems.findIndex(
        (item) => item.id === updated.id
      );
    
      if (index !== -1) {
        state.reserveItems[index] = updated;
      }
    }   
  },
});

export const { addReservation, removeReservation, clearReservations, setReservations,  updateReservation, editReservation} = reserveSlice.actions;
export default reserveSlice.reducer;